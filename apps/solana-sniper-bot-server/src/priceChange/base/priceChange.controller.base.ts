/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PriceChangeService } from "../priceChange.service";
import { PriceChangeCreateInput } from "./PriceChangeCreateInput";
import { PriceChange } from "./PriceChange";
import { PriceChangeFindManyArgs } from "./PriceChangeFindManyArgs";
import { PriceChangeWhereUniqueInput } from "./PriceChangeWhereUniqueInput";
import { PriceChangeUpdateInput } from "./PriceChangeUpdateInput";

export class PriceChangeControllerBase {
  constructor(protected readonly service: PriceChangeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PriceChange })
  async createPriceChange(
    @common.Body() data: PriceChangeCreateInput
  ): Promise<PriceChange> {
    return await this.service.createPriceChange({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PriceChange] })
  @ApiNestedQuery(PriceChangeFindManyArgs)
  async priceChanges(@common.Req() request: Request): Promise<PriceChange[]> {
    const args = plainToClass(PriceChangeFindManyArgs, request.query);
    return this.service.priceChanges({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PriceChange })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async priceChange(
    @common.Param() params: PriceChangeWhereUniqueInput
  ): Promise<PriceChange | null> {
    const result = await this.service.priceChange({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PriceChange })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePriceChange(
    @common.Param() params: PriceChangeWhereUniqueInput,
    @common.Body() data: PriceChangeUpdateInput
  ): Promise<PriceChange | null> {
    try {
      return await this.service.updatePriceChange({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PriceChange })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePriceChange(
    @common.Param() params: PriceChangeWhereUniqueInput
  ): Promise<PriceChange | null> {
    try {
      return await this.service.deletePriceChange({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
