/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PriceChange as PrismaPriceChange } from "@prisma/client";

export class PriceChangeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PriceChangeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.priceChange.count(args);
  }

  async priceChanges<T extends Prisma.PriceChangeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceChangeFindManyArgs>
  ): Promise<PrismaPriceChange[]> {
    return this.prisma.priceChange.findMany<Prisma.PriceChangeFindManyArgs>(
      args
    );
  }
  async priceChange<T extends Prisma.PriceChangeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceChangeFindUniqueArgs>
  ): Promise<PrismaPriceChange | null> {
    return this.prisma.priceChange.findUnique(args);
  }
  async createPriceChange<T extends Prisma.PriceChangeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceChangeCreateArgs>
  ): Promise<PrismaPriceChange> {
    return this.prisma.priceChange.create<T>(args);
  }
  async updatePriceChange<T extends Prisma.PriceChangeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceChangeUpdateArgs>
  ): Promise<PrismaPriceChange> {
    return this.prisma.priceChange.update<T>(args);
  }
  async deletePriceChange<T extends Prisma.PriceChangeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceChangeDeleteArgs>
  ): Promise<PrismaPriceChange> {
    return this.prisma.priceChange.delete(args);
  }
}
